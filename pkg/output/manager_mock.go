// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -source manager.go -destination manager_mock.go -package output
//

// Package output is a generated GoMock package.
package output

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOutputManager is a mock of OutputManager interface.
type MockOutputManager struct {
	ctrl     *gomock.Controller
	recorder *MockOutputManagerMockRecorder
}

// MockOutputManagerMockRecorder is the mock recorder for MockOutputManager.
type MockOutputManagerMockRecorder struct {
	mock *MockOutputManager
}

// NewMockOutputManager creates a new mock instance.
func NewMockOutputManager(ctrl *gomock.Controller) *MockOutputManager {
	mock := &MockOutputManager{ctrl: ctrl}
	mock.recorder = &MockOutputManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutputManager) EXPECT() *MockOutputManagerMockRecorder {
	return m.recorder
}

// GetOutputResource mocks base method.
func (m *MockOutputManager) GetOutputResource(arg0 string) (*OutputResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputResource", arg0)
	ret0, _ := ret[0].(*OutputResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutputResource indicates an expected call of GetOutputResource.
func (mr *MockOutputManagerMockRecorder) GetOutputResource(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputResource", reflect.TypeOf((*MockOutputManager)(nil).GetOutputResource), arg0)
}

// InitOutputs mocks base method.
func (m *MockOutputManager) InitOutputs() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitOutputs")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitOutputs indicates an expected call of InitOutputs.
func (mr *MockOutputManagerMockRecorder) InitOutputs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitOutputs", reflect.TypeOf((*MockOutputManager)(nil).InitOutputs))
}

// StartOutputs mocks base method.
func (m *MockOutputManager) StartOutputs() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartOutputs")
}

// StartOutputs indicates an expected call of StartOutputs.
func (mr *MockOutputManagerMockRecorder) StartOutputs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOutputs", reflect.TypeOf((*MockOutputManager)(nil).StartOutputs))
}

// StopOutputs mocks base method.
func (m *MockOutputManager) StopOutputs() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopOutputs")
}

// StopOutputs indicates an expected call of StopOutputs.
func (mr *MockOutputManagerMockRecorder) StopOutputs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopOutputs", reflect.TypeOf((*MockOutputManager)(nil).StopOutputs))
}
